1. import java.util.*;  
public class Example1 {  
  public static void main(String args[]){  
   // Create a tree map
   TreeMap<Integer,String> tree_map=new TreeMap<Integer,String>();      
  // Put elements to the map 
  tree_map.put(1, "Red");
  tree_map.put(2, "Green");
  tree_map.put(3, "Black");
  tree_map.put(4, "White");
  tree_map.put(5, "Blue");
    
   for (Map.Entry<Integer,String> entry : tree_map.entrySet())
   {
    System.out.println(entry.getKey() + "=>" + entry.getValue());
   }
 }  


2. import java.util.*;
public class DoublyLinkListDemo {
    public static void main(String[] args) {
        int i,ch,element,position;
        LinkedList<Integer> dblList = new LinkedList<Integer>();
        System.out.println("1.Insert element at begining");
        System.out.println("2.Insert element at end");
        System.out.println("3.Insert element at position");
        System.out.println("4.Delete a given element");
        System.out.println("5.Display elements in the list");
        System.out.println("6.Exit");
        Scanner sc=new Scanner(System.in);
        do {
            System.out.print("Choose your choice(1 - 6) :");
            ch=sc.nextInt();
            switch(ch) {
                case 1: // To read element form the user
                        System.out.print("Enter an element to insert at begining : ");
                        element=sc.nextInt();
                        // to add element to doubly linked list at begining
                        dblList.addFirst(element);
                        System.out.println("Successfully Inserted");
                        break;
                case 2: // To read element form the user
                        System.out.print("Enter an element to insert at end : ");
                        element=sc.nextInt();
                        // to add element to doubly linked list at end
                        dblList.addLast(element);
                        System.out.println("Successfully Inserted");
                        break;
                case 3: // To read position form the user
                        System.out.print("Enter position  to insert element : ");
                        position=sc.nextInt();
                        // checks if the position is lessthan or equal to list size.
                        if(position<=dblList.size()) {
                            // To read element
                            System.out.print("Enter element : ");
                            element=sc.nextInt();
                            // to add element to doubly linked list at given position
                            dblList.add(position,element);
                            System.out.println("Successfully Inserted");
                        }
                        else {
                            System.out.println("Enter the size between 0 to"+dblList.size());
                        }
                        break;
                case 4:    // To read element form the user to remove
                        System.out.print("Enter element to remove : ");
                        Integer ele_rm;
                        ele_rm=sc.nextInt();
                        if (dblList.contains(ele_rm)){
                            dblList.remove(ele_rm);
                            System.out.println("Successfully Deleted");
                            Iterator itr=dblList.iterator(); 
                            System.out.println("Elements after deleting :"+ele_rm);
                            while(itr.hasNext()) {  
                                System.out.print(itr.next()+"<->"); 
                            }
                            System.out.println("NULL"); 
                        }
                        else {
                            System.out.println("Element not found");
                        }
                        break;
        
                case 5:    // To Display elements in the list
                        Iterator itr=dblList.iterator(); 
                        System.out.println("Elements in the list :");
                        while(itr.hasNext()) {  
                            System.out.print(itr.next()+"<->"); 
                        }
                        System.out.println("NULL");
                        break;

                case 6:    System.out.println("Program terminated");
                        break;
                default:System.out.println("Invalid choice");
            }
        }
        while(ch!=6);
    }
}

3. import java.io.*;
import java.util.Enumeration;
import java.util.Hashtable;
  
// Main class
// EnumerationOnKeys
public class GFG {
  
    // Main driver method
    public static void main(String[] args)
    {
        // Creating an empty hashtable
        Hashtable<Integer, String> ht
            = new Hashtable<Integer, String>();
  
        // Inserting key-value pairs into hash table
        // using put() method
        ht.put(1, "Geeks");
        ht.put(2, "for");
        ht.put(3, "Geeks");
  
        // Now creating an Enumeration object
        //  to read elements
        Enumeration e = ht.elements();
  
        // Condition holds true till there is
        // single key remaining
  
        // Printing elements of hashtable
        // using enumeration
        while (e.hasMoreElements()) {
  
            // Printing the current element
            System.out.println(e.nextElement());
        }
    }
}

4.
//vector

import java.util.*;
public class VectorExample
{

	public static void main(String[] args) 
	{
		Vector fruits = new Vector();
		fruits.add("Apple");
		fruits.add("Orange");
		fruits.add("Pineapple");
		System.out.println(fruits);
		for(Iterator it = fruits.iterator(); it.hasNext();)
			System.out.println(it.next());
			fruits.setElementAt("Melon", 1);
			System.out.println(fruits);
			

	}

//hash map

import java.util.*;
import java.util.HashMap;
import java.util.Map;

public class HashMapExample 
{

	public static void main(String[] args) 
	{
		HashMap hm = new HashMap();
		hm.put("Bag", new Integer(1100));
		hm.put("Wallet",new Integer(700));
		hm.put("Belt",new Integer(600));
		
		Set set = hm.entrySet();
		
		Iterator i = set.iterator();
		
		while(i.hasNext())
		{
			Map.Entry me = (Map.Entry)i.next();
			System.out.println(me.getKey() + ": ");
			System.out.println(me.getValue());
		}
		System.out.println("Size of hash map is :" + hm.size());
		System.out.println(hm.isEmpty());
	

	}

}

EXCEPTION HANDLING 
package ExceptionHandling;

import java.util.Scanner;

class Ex1
{  
	public static void main(String arg[])
    {  
		try
		{
			// declare and initialize here.
			int a,b,c;
			Scanner KB=new Scanner(System.in);
			
			// input numbers here.
			System.out.print("Enter first number : ");
			a=KB.nextInt();
       
			System.out.print("Enter second number : ");
			b=KB.nextInt();
       
			//throw to catch
			c=a/b;
			System.out.println("Result:"+c);
		}
		catch(ArithmeticException e)
		{
			System.out.println("Error:"+e.getMessage());
			System.out.println("Error:"+e);
		}
		// here program ends.
		System.out.println("End of Program...");
	}
}
